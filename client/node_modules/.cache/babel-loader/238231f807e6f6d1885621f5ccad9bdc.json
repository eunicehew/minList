{"ast":null,"code":"import { userService } from \"../../../services/UserService\";\nimport { history } from \"../../../app/history\"; //Actions\n\nconst LOGIN_REQUEST = \"components/Home/LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"components/Home/LOGIN_SUCCESS\";\nconst LOGIN_FAILURE = \"components/Home/LOGIN_FAILURE\";\nconst LOGOUT = \"components/Home/LOGOUT\"; //Reducer\n\nlet user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = user ? {\n  loggedIn: true,\n  user\n} : {};\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return Object.assign({}, state, {\n        loggingIn: true\n      });\n\n    case LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        loggedIn: true,\n        user: action.user\n      });\n\n    case LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        error: true\n      });\n\n    case LOGOUT:\n      return Object.assign({}, state, {});\n\n    default:\n      return state;\n  }\n} //Action Creators\n\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    userService.login(username, password).then(user => {\n      dispatch(success(user));\n      history.push(\"/\");\n    }, error => {\n      dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: LOGIN_FAILURE,\n      error\n    };\n  }\n}\nexport function logout() {\n  userService.logout();\n  return dispatch => {\n    dispatch({\n      type: LOGOUT\n    });\n  };\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/components/home/ducks/Login.js"],"names":["userService","history","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","user","JSON","parse","localStorage","getItem","initialState","loggedIn","loginReducer","state","action","type","Object","assign","loggingIn","error","login","username","password","dispatch","request","then","success","push","failure","toString","logout"],"mappings":"AAAA,SAASA,WAAT,QAA4B,+BAA5B;AACA,SAASC,OAAT,QAAwB,sBAAxB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,+BAAtB;AACA,MAAMC,aAAa,GAAG,+BAAtB;AACA,MAAMC,aAAa,GAAG,+BAAtB;AACA,MAAMC,MAAM,GAAG,wBAAf,C,CAEA;;AACA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAX;AACA,MAAMC,YAAY,GAAGL,IAAI,GAAG;AAAEM,EAAAA,QAAQ,EAAE,IAAZ;AAAkBN,EAAAA;AAAlB,CAAH,GAA8B,EAAvD;AAEA,eAAe,SAASO,YAAT,CAAsBC,KAAK,GAAGH,YAA9B,EAA4CI,MAA5C,EAAoD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,aAAL;AACE,aAAOe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BK,QAAAA,SAAS,EAAE;AADmB,OAAzB,CAAP;;AAGF,SAAKhB,aAAL;AACE,aAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BF,QAAAA,QAAQ,EAAE,IADoB;AAE9BN,QAAAA,IAAI,EAAES,MAAM,CAACT;AAFiB,OAAzB,CAAP;;AAIF,SAAKF,aAAL;AACE,aAAOa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BM,QAAAA,KAAK,EAAE;AADuB,OAAzB,CAAP;;AAGF,SAAKf,MAAL;AACE,aAAOY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB,EAAzB,CAAP;;AACF;AACE,aAAOA,KAAP;AAjBJ;AAmBD,C,CAED;;AACA,OAAO,SAASO,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AACxC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,OAAO,CAAC;AAAEH,MAAAA;AAAF,KAAD,CAAR,CAAR;AACAtB,IAAAA,WAAW,CAACqB,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCG,IAAtC,CACGpB,IAAD,IAAU;AACRkB,MAAAA,QAAQ,CAACG,OAAO,CAACrB,IAAD,CAAR,CAAR;AACAL,MAAAA,OAAO,CAAC2B,IAAR,CAAa,GAAb;AACD,KAJH,EAKGR,KAAD,IAAW;AACTI,MAAAA,QAAQ,CAACK,OAAO,CAACT,KAAK,CAACU,QAAN,EAAD,CAAR,CAAR,CADS,CAET;AACD,KARH;AAUD,GAZD;;AAcA,WAASL,OAAT,CAAiBnB,IAAjB,EAAuB;AACrB,WAAO;AAAEU,MAAAA,IAAI,EAAEd,aAAR;AAAuBI,MAAAA;AAAvB,KAAP;AACD;;AACD,WAASqB,OAAT,CAAiBrB,IAAjB,EAAuB;AACrB,WAAO;AAAEU,MAAAA,IAAI,EAAEb,aAAR;AAAuBG,MAAAA;AAAvB,KAAP;AACD;;AACD,WAASuB,OAAT,CAAiBT,KAAjB,EAAwB;AACtB,WAAO;AAAEJ,MAAAA,IAAI,EAAEZ,aAAR;AAAuBgB,MAAAA;AAAvB,KAAP;AACD;AACF;AAED,OAAO,SAASW,MAAT,GAAkB;AACvB/B,EAAAA,WAAW,CAAC+B,MAAZ;AACA,SAAQP,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAER,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GAFD;AAGD","sourcesContent":["import { userService } from \"../../../services/UserService\";\nimport { history } from \"../../../app/history\";\n\n//Actions\nconst LOGIN_REQUEST = \"components/Home/LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"components/Home/LOGIN_SUCCESS\";\nconst LOGIN_FAILURE = \"components/Home/LOGIN_FAILURE\";\nconst LOGOUT = \"components/Home/LOGOUT\";\n\n//Reducer\nlet user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = user ? { loggedIn: true, user } : {};\n\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return Object.assign({}, state, {\n        loggingIn: true,\n      });\n    case LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        loggedIn: true,\n        user: action.user,\n      });\n    case LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        error: true,\n      });\n    case LOGOUT:\n      return Object.assign({}, state, {});\n    default:\n      return state;\n  }\n}\n\n//Action Creators\nexport function login(username, password) {\n  return (dispatch) => {\n    dispatch(request({ username }));\n    userService.login(username, password).then(\n      (user) => {\n        dispatch(success(user));\n        history.push(\"/\");\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        // dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: LOGIN_REQUEST, user };\n  }\n  function success(user) {\n    return { type: LOGIN_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: LOGIN_FAILURE, error };\n  }\n}\n\nexport function logout() {\n  userService.logout();\n  return (dispatch) => {\n    dispatch({ type: LOGOUT });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}