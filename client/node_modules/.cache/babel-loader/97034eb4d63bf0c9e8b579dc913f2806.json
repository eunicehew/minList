{"ast":null,"code":"var _jsxFileName = \"/Users/Eunice/Documents/my-app/client/src/components/common/List/List.js\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport List from \"@material-ui/core/List\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { DraggableListItem, ListItemButtons } from \"./ListItems\";\nimport { AddDialog } from \"../Dialog.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { itemService } from \"../../../services/ItemService\"; // const ListCard = ({ isDraggable, listId, addItem, deleteItem, ...rest }) => {\n//   const onDragOver = (event) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"lightgray\";\n//     // event.currentTarget.style.cursor = \"grabbing\";\n//   };\n//   const onDrop = (event, listId, addItem, deleteItem) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"\";\n//     // event.currentTarget.style.cursor = \"default\";\n//     let itemId = event.dataTransfer.getData(\"item\");\n//     let selectedItem = this.props.items.find((i) => i._id === itemId);\n//     if (listId !== event.target._id) {\n//       //get id of new list\n//       //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n//       const oldList = { listId: listId, ...selectedItem };\n//       const newList = { listId: event.target._id, ...selectedItem };\n//       addItem(newList);\n//       deleteItem(oldList);\n//     }\n//   };\n//   const onDragLeave = (event) => {\n//     event.currentTarget.style.background = \"\";\n//   };\n//   return isDraggable ? (\n//     <Card\n//       onDragOver={(event) => onDragOver(event)}\n//       onDrop={(event) => onDrop(event, listId, addItem, deleteItem)}\n//       onDragLeave={(event) => onDragLeave(event)}\n//       style={{ height: \"30vw\", width: \"30vw\" }}\n//     >\n//       {rest}\n//     </Card>\n//   ) : (\n//     <Card style={{ height: \"30vw\", width: \"30vw\" }}>{rest}</Card>\n//   );\n// };\n\nconst DraggableList = ({\n  isDraggable,\n  sheetId,\n  listId,\n  header,\n  items,\n  moveItem,\n  addItem,\n  editItem,\n  deleteItem,\n  // bottomItem,\n  // setBottomItem,\n  onDragOver,\n  onDrop,\n  onDragOverItem,\n  onDragLeave,\n  onDropItem,\n  onDragLeaveItem\n}) => {\n  // const onDragOver = (event) => {\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"lightgray\";\n  //   // event.currentTarget.style.cursor = \"grabbing\";\n  // };\n  // const onDrop = (event, listId, items, moveItem, sheetId, bottomItem) => {\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"\";\n  //   // event.currentTarget.style.cursor = \"default\";\n  //   let itemId = event.dataTransfer.getData(\"item\");\n  //   console.log(itemId);\n  //   console.log(bottomItem);\n  //   let index =\n  //     bottomItem !== items.length &&\n  //     bottomItem !== 0 &&\n  //     items.findIndex((i) => i._id === bottomItem) !== -1\n  //       ? items.findIndex((i) => i._id === bottomItem)\n  //       : bottomItem;\n  //   console.log(index);\n  //   let body = { listId, index, itemId };\n  //   moveItem(body, sheetId);\n  // };\n  // const onDragLeave = (event) => {\n  //   event.currentTarget.style.background = \"\";\n  // };\n  // // let bottomItem = 0; //problem moving between lists bc this is per list\n  // const onDragOverItem = (event) => {\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"lightblue\";\n  // };\n  // const onDropItem = (event, item, setBottomItem) => {\n  //   console.log(item);\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"\";\n  //   if (item !== bottomItem) {\n  //     setBottomItem(item);\n  //   }\n  // };\n  // const onDragLeaveItem = (event) => {\n  //   event.currentTarget.style.background = \"\";\n  // };\n  return /*#__PURE__*/React.createElement(Card, {\n    onDragOver: event => onDragOver(event),\n    onDrop: event => // onDrop(event, listId, items, moveItem, sheetId, bottomItem)\n    onDrop(event, listId, items, moveItem, sheetId),\n    onDragLeave: event => onDragLeave(event),\n    style: {\n      height: \"30vw\",\n      width: \"30vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    // onDrop={(event) => onDropItem(event, 0, setBottomItem)}\n    onDrop: event => onDropItem(event, 0),\n    style: {\n      margin: \"10px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, header), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, items && items.length > 0 ? items.map(item => {\n    return /*#__PURE__*/React.createElement(DraggableListItem, {\n      key: item._id,\n      isDraggable: true // isDraggable={isDraggable || false}\n      ,\n      item: item,\n      onDragOver: event => onDragOverItem(event),\n      onDrop: event => onDropItem(event, item._id) // onDrop={(event) => onDropItem(event, item._id, setBottomItem)}\n      ,\n      onDragLeave: event => onDragLeaveItem(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 19\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, \"No items \"))), /*#__PURE__*/React.createElement(CardActions, {\n    onDrop: event => onDropItem(event, items.length) // onDrop={(event) => onDropItem(event, items.length, setBottomItem)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddDialog, {\n    header: \"Add Item\",\n    fields: {\n      \"Item Name\": \"name\"\n    } // specialFields={[\n    //   (changeFunction) => {\n    //     return (\n    //       <TextField\n    //         margin=\"dense\"\n    //         key=\"Description\"\n    //         id=\"details\"\n    //         label=\"Description\"\n    //         fullWidth\n    //         multiline\n    //         required\n    //         type=\"text\"\n    //         onChange={changeFunction}\n    //       />\n    //     );\n    //   },\n    // ]}\n    ,\n    addFunction: addItem,\n    body: {\n      listId: listId,\n      sheetId: sheetId\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport { DraggableList };","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/components/common/List/List.js"],"names":["React","Card","CardContent","CardActions","List","ListItemText","DraggableListItem","ListItemButtons","AddDialog","TextField","itemService","DraggableList","isDraggable","sheetId","listId","header","items","moveItem","addItem","editItem","deleteItem","onDragOver","onDrop","onDragOverItem","onDragLeave","onDropItem","onDragLeaveItem","event","height","width","margin","length","map","item","_id","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport List from \"@material-ui/core/List\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { DraggableListItem, ListItemButtons } from \"./ListItems\";\nimport { AddDialog } from \"../Dialog.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { itemService } from \"../../../services/ItemService\";\n\n// const ListCard = ({ isDraggable, listId, addItem, deleteItem, ...rest }) => {\n//   const onDragOver = (event) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"lightgray\";\n//     // event.currentTarget.style.cursor = \"grabbing\";\n//   };\n//   const onDrop = (event, listId, addItem, deleteItem) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"\";\n//     // event.currentTarget.style.cursor = \"default\";\n//     let itemId = event.dataTransfer.getData(\"item\");\n//     let selectedItem = this.props.items.find((i) => i._id === itemId);\n//     if (listId !== event.target._id) {\n//       //get id of new list\n//       //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n//       const oldList = { listId: listId, ...selectedItem };\n//       const newList = { listId: event.target._id, ...selectedItem };\n//       addItem(newList);\n//       deleteItem(oldList);\n//     }\n//   };\n//   const onDragLeave = (event) => {\n//     event.currentTarget.style.background = \"\";\n//   };\n//   return isDraggable ? (\n//     <Card\n//       onDragOver={(event) => onDragOver(event)}\n//       onDrop={(event) => onDrop(event, listId, addItem, deleteItem)}\n//       onDragLeave={(event) => onDragLeave(event)}\n//       style={{ height: \"30vw\", width: \"30vw\" }}\n//     >\n//       {rest}\n//     </Card>\n//   ) : (\n//     <Card style={{ height: \"30vw\", width: \"30vw\" }}>{rest}</Card>\n//   );\n// };\n\nconst DraggableList = ({\n  isDraggable,\n  sheetId,\n  listId,\n  header,\n  items,\n  moveItem,\n  addItem,\n  editItem,\n  deleteItem,\n  // bottomItem,\n  // setBottomItem,\n  onDragOver,\n  onDrop,\n  onDragOverItem,\n  onDragLeave,\n  onDropItem,\n  onDragLeaveItem,\n}) => {\n  // const onDragOver = (event) => {\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"lightgray\";\n  //   // event.currentTarget.style.cursor = \"grabbing\";\n  // };\n\n  // const onDrop = (event, listId, items, moveItem, sheetId, bottomItem) => {\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"\";\n  //   // event.currentTarget.style.cursor = \"default\";\n  //   let itemId = event.dataTransfer.getData(\"item\");\n  //   console.log(itemId);\n  //   console.log(bottomItem);\n  //   let index =\n  //     bottomItem !== items.length &&\n  //     bottomItem !== 0 &&\n  //     items.findIndex((i) => i._id === bottomItem) !== -1\n  //       ? items.findIndex((i) => i._id === bottomItem)\n  //       : bottomItem;\n  //   console.log(index);\n  //   let body = { listId, index, itemId };\n  //   moveItem(body, sheetId);\n  // };\n\n  // const onDragLeave = (event) => {\n  //   event.currentTarget.style.background = \"\";\n  // };\n\n  // // let bottomItem = 0; //problem moving between lists bc this is per list\n  // const onDragOverItem = (event) => {\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"lightblue\";\n  // };\n\n  // const onDropItem = (event, item, setBottomItem) => {\n  //   console.log(item);\n  //   event.preventDefault();\n  //   event.currentTarget.style.background = \"\";\n  //   if (item !== bottomItem) {\n  //     setBottomItem(item);\n  //   }\n  // };\n\n  // const onDragLeaveItem = (event) => {\n  //   event.currentTarget.style.background = \"\";\n  // };\n\n  return (\n    <Card\n      onDragOver={(event) => onDragOver(event)}\n      onDrop={(event) =>\n        // onDrop(event, listId, items, moveItem, sheetId, bottomItem)\n        onDrop(event, listId, items, moveItem, sheetId)\n      }\n      onDragLeave={(event) => onDragLeave(event)}\n      style={{ height: \"30vw\", width: \"30vw\" }}\n    >\n      {/* // <ListCard\n    //   isDraggable={isDraggable || false}\n    //   listId={listId}\n    //   addItem={addItem}\n    //   deleteItem={deleteItem}\n    // > */}\n      <h4\n        // onDrop={(event) => onDropItem(event, 0, setBottomItem)}\n        onDrop={(event) => onDropItem(event, 0)}\n        style={{ margin: \"10px 0px\" }}\n      >\n        {header}\n      </h4>\n      <List>\n        <CardContent>\n          {items && items.length > 0 ? (\n            items.map((item) => {\n              return (\n                <DraggableListItem\n                  key={item._id}\n                  isDraggable\n                  // isDraggable={isDraggable || false}\n                  item={item}\n                  onDragOver={(event) => onDragOverItem(event)}\n                  onDrop={(event) => onDropItem(event, item._id)}\n                  // onDrop={(event) => onDropItem(event, item._id, setBottomItem)}\n                  onDragLeave={(event) => onDragLeaveItem(event)}\n                >\n                  <ListItemText primary={item.name} />\n                  {/* <ListItemButtons\n                    item={item}\n                    editItem={editItem}\n                    deleteItem={deleteItem}\n                  /> */}\n                </DraggableListItem>\n              );\n            })\n          ) : (\n            <li>No items </li>\n          )}\n        </CardContent>\n      </List>\n      <CardActions\n        onDrop={(event) => onDropItem(event, items.length)}\n        // onDrop={(event) => onDropItem(event, items.length, setBottomItem)}\n      >\n        <AddDialog\n          header=\"Add Item\"\n          fields={{ \"Item Name\": \"name\" }}\n          // specialFields={[\n          //   (changeFunction) => {\n          //     return (\n          //       <TextField\n          //         margin=\"dense\"\n          //         key=\"Description\"\n          //         id=\"details\"\n          //         label=\"Description\"\n          //         fullWidth\n          //         multiline\n          //         required\n          //         type=\"text\"\n          //         onChange={changeFunction}\n          //       />\n          //     );\n          //   },\n          // ]}\n          addFunction={addItem}\n          body={{ listId: listId, sheetId: sheetId }}\n        />\n      </CardActions>\n      {/* </ListCard> */}\n    </Card>\n  );\n};\n\nexport { DraggableList };\n"]},"metadata":{},"sourceType":"module"}