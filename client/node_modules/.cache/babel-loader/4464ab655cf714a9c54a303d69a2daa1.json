{"ast":null,"code":"var _jsxFileName = \"/Users/Eunice/Documents/my-app/client/src/components/common/List/List.js\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport List from \"@material-ui/core/List\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { DraggableListItem, ListItemButtons } from \"./ListItems\";\nimport { AddDialog } from \"../Dialog.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { itemService } from \"../../../services/ItemService\";\nimport { moveLists } from \"../../../../../server/controller/itemController\"; // const ListCard = ({ isDraggable, listId, addItem, deleteItem, ...rest }) => {\n//   const onDragOver = (event) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"lightgray\";\n//     // event.currentTarget.style.cursor = \"grabbing\";\n//   };\n//   const onDrop = (event, listId, addItem, deleteItem) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"\";\n//     // event.currentTarget.style.cursor = \"default\";\n//     let itemId = event.dataTransfer.getData(\"item\");\n//     let selectedItem = this.props.items.find((i) => i._id === itemId);\n//     if (listId !== event.target._id) {\n//       //get id of new list\n//       //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n//       const oldList = { listId: listId, ...selectedItem };\n//       const newList = { listId: event.target._id, ...selectedItem };\n//       addItem(newList);\n//       deleteItem(oldList);\n//     }\n//   };\n//   const onDragLeave = (event) => {\n//     event.currentTarget.style.background = \"\";\n//   };\n//   return isDraggable ? (\n//     <Card\n//       onDragOver={(event) => onDragOver(event)}\n//       onDrop={(event) => onDrop(event, listId, addItem, deleteItem)}\n//       onDragLeave={(event) => onDragLeave(event)}\n//       style={{ height: \"30vw\", width: \"30vw\" }}\n//     >\n//       {rest}\n//     </Card>\n//   ) : (\n//     <Card style={{ height: \"30vw\", width: \"30vw\" }}>{rest}</Card>\n//   );\n// };\n\nconst DraggableList = ({\n  isDraggable,\n  sheetId,\n  listId,\n  header,\n  items,\n  moveLists,\n  addItem,\n  editItem,\n  deleteItem\n}) => {\n  const onDragOver = event => {\n    event.preventDefault();\n    event.currentTarget.style.background = \"lightgray\"; // event.currentTarget.style.cursor = \"grabbing\";\n  };\n\n  const onDrop = (event, listId, items, moveLists) => {\n    event.preventDefault();\n    event.currentTarget.style.background = \"\"; // event.currentTarget.style.cursor = \"default\";\n\n    let itemId = event.dataTransfer.getData(\"item\"); //find index of item it's dragged over, use as index to insert\n    //if list is empty, index = 0\n    //let index = items.find((i) => i._id === itemId);\n    // moveLists(listId, index, itemId);\n  };\n\n  const onDragLeave = event => {\n    event.currentTarget.style.background = \"\";\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    onDragOver: event => onDragOver(event),\n    onDrop: event => onDrop(event, listId, items, moveLists),\n    onDragLeave: event => onDragLeave(event),\n    style: {\n      height: \"30vw\",\n      width: \"30vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    style: {\n      margin: \"10px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, header), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, items && items.length > 0 ? items.map(item => {\n    return /*#__PURE__*/React.createElement(DraggableListItem, {\n      key: item._id,\n      isDraggable: true // isDraggable={isDraggable || false}\n      ,\n      item: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, \"No items \"))), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddDialog, {\n    header: \"Add Item\",\n    fields: {\n      \"Item Name\": \"name\"\n    } // specialFields={[\n    //   (changeFunction) => {\n    //     return (\n    //       <TextField\n    //         margin=\"dense\"\n    //         key=\"Description\"\n    //         id=\"details\"\n    //         label=\"Description\"\n    //         fullWidth\n    //         multiline\n    //         required\n    //         type=\"text\"\n    //         onChange={changeFunction}\n    //       />\n    //     );\n    //   },\n    // ]}\n    ,\n    addFunction: addItem,\n    body: {\n      listId: listId,\n      sheetId: sheetId\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport { DraggableList };","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/components/common/List/List.js"],"names":["React","Card","CardContent","CardActions","List","ListItemText","DraggableListItem","ListItemButtons","AddDialog","TextField","itemService","moveLists","DraggableList","isDraggable","sheetId","listId","header","items","addItem","editItem","deleteItem","onDragOver","event","preventDefault","currentTarget","style","background","onDrop","itemId","dataTransfer","getData","onDragLeave","height","width","margin","length","map","item","_id","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport List from \"@material-ui/core/List\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { DraggableListItem, ListItemButtons } from \"./ListItems\";\nimport { AddDialog } from \"../Dialog.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { itemService } from \"../../../services/ItemService\";\nimport { moveLists } from \"../../../../../server/controller/itemController\";\n\n// const ListCard = ({ isDraggable, listId, addItem, deleteItem, ...rest }) => {\n//   const onDragOver = (event) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"lightgray\";\n//     // event.currentTarget.style.cursor = \"grabbing\";\n//   };\n//   const onDrop = (event, listId, addItem, deleteItem) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"\";\n//     // event.currentTarget.style.cursor = \"default\";\n//     let itemId = event.dataTransfer.getData(\"item\");\n//     let selectedItem = this.props.items.find((i) => i._id === itemId);\n//     if (listId !== event.target._id) {\n//       //get id of new list\n//       //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n//       const oldList = { listId: listId, ...selectedItem };\n//       const newList = { listId: event.target._id, ...selectedItem };\n//       addItem(newList);\n//       deleteItem(oldList);\n//     }\n//   };\n//   const onDragLeave = (event) => {\n//     event.currentTarget.style.background = \"\";\n//   };\n//   return isDraggable ? (\n//     <Card\n//       onDragOver={(event) => onDragOver(event)}\n//       onDrop={(event) => onDrop(event, listId, addItem, deleteItem)}\n//       onDragLeave={(event) => onDragLeave(event)}\n//       style={{ height: \"30vw\", width: \"30vw\" }}\n//     >\n//       {rest}\n//     </Card>\n//   ) : (\n//     <Card style={{ height: \"30vw\", width: \"30vw\" }}>{rest}</Card>\n//   );\n// };\n\nconst DraggableList = ({\n  isDraggable,\n  sheetId,\n  listId,\n  header,\n  items,\n  moveLists,\n  addItem,\n  editItem,\n  deleteItem,\n}) => {\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.currentTarget.style.background = \"lightgray\";\n    // event.currentTarget.style.cursor = \"grabbing\";\n  };\n  const onDrop = (event, listId, items, moveLists) => {\n    event.preventDefault();\n    event.currentTarget.style.background = \"\";\n    // event.currentTarget.style.cursor = \"default\";\n    let itemId = event.dataTransfer.getData(\"item\");\n\n    //find index of item it's dragged over, use as index to insert\n    //if list is empty, index = 0\n    //let index = items.find((i) => i._id === itemId);\n\n    // moveLists(listId, index, itemId);\n  };\n\n  const onDragLeave = (event) => {\n    event.currentTarget.style.background = \"\";\n  };\n\n  return (\n    <Card\n      onDragOver={(event) => onDragOver(event)}\n      onDrop={(event) => onDrop(event, listId, items, moveLists)}\n      onDragLeave={(event) => onDragLeave(event)}\n      style={{ height: \"30vw\", width: \"30vw\" }}\n    >\n      {/* // <ListCard\n    //   isDraggable={isDraggable || false}\n    //   listId={listId}\n    //   addItem={addItem}\n    //   deleteItem={deleteItem}\n    // > */}\n      <h4 style={{ margin: \"10px 0px\" }}>{header}</h4>\n      <List>\n        <CardContent>\n          {items && items.length > 0 ? (\n            items.map((item) => {\n              return (\n                <DraggableListItem\n                  key={item._id}\n                  isDraggable\n                  // isDraggable={isDraggable || false}\n                  item={item}\n                >\n                  <ListItemText primary={item.name} />\n                  {/* <ListItemButtons\n                    item={item}\n                    editItem={editItem}\n                    deleteItem={deleteItem}\n                  /> */}\n                </DraggableListItem>\n              );\n            })\n          ) : (\n            <li>No items </li>\n          )}\n        </CardContent>\n      </List>\n      <CardActions>\n        <AddDialog\n          header=\"Add Item\"\n          fields={{ \"Item Name\": \"name\" }}\n          // specialFields={[\n          //   (changeFunction) => {\n          //     return (\n          //       <TextField\n          //         margin=\"dense\"\n          //         key=\"Description\"\n          //         id=\"details\"\n          //         label=\"Description\"\n          //         fullWidth\n          //         multiline\n          //         required\n          //         type=\"text\"\n          //         onChange={changeFunction}\n          //       />\n          //     );\n          //   },\n          // ]}\n          addFunction={addItem}\n          body={{ listId: listId, sheetId: sheetId }}\n        />\n      </CardActions>\n      {/* </ListCard> */}\n    </Card>\n  );\n};\n\nexport { DraggableList };\n"]},"metadata":{},"sourceType":"module"}