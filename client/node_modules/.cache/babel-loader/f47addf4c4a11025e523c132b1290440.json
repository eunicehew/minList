{"ast":null,"code":"// import config from \"config\";\nimport axios from \"axios\";\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = localStorage.getItem(\"user\");\n  let token = localStorage.getItem(\"token\");\n\n  if (user && token) {\n    return {\n      Authorization: \"Bearer \" + token\n    };\n  } else {\n    return {};\n  }\n}\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  return axios.post(\"/users/authenticate\", {\n    username,\n    password\n  }).then(handleResponse).then(data => {\n    const user = data.username; // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n    localStorage.setItem(\"user\", user);\n    localStorage.setItem(\"token\", data.token);\n    console.log(user);\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"token\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(username, password) {\n  return axios.post(`/users/register`, {\n    username,\n    password\n  }).then(handleResponse); // .then(login({ username, password }))\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  if (response.status !== 200) {\n    if (response.status === 401) {\n      // auto logout if 401 response returned from api\n      logout();\n      console.log(\"BAD\"); // location.reload(true);\n    } // const error = (response && data.message) || response.statusText;\n\n\n    console.log(\"error\"); // return Promise.reject(error);\n  }\n\n  console.log(response);\n  return response.data;\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/services/UserService.js"],"names":["axios","authHeader","user","localStorage","getItem","token","Authorization","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","post","then","handleResponse","data","setItem","console","log","removeItem","requestOptions","method","headers","fetch","id","body","JSON","stringify","response","status"],"mappings":"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","sourcesContent":["// import config from \"config\";\nimport axios from \"axios\";\n\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = localStorage.getItem(\"user\");\n  let token = localStorage.getItem(\"token\");\n\n  if (user && token) {\n    return { Authorization: \"Bearer \" + token };\n  } else {\n    return {};\n  }\n}\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete,\n};\n\nfunction login(username, password) {\n  return axios\n    .post(\"/users/authenticate\", { username, password })\n    .then(handleResponse)\n    .then((data) => {\n      const user = data.username;\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem(\"user\", user);\n      localStorage.setItem(\"token\", data.token);\n      console.log(user);\n      return user;\n    });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"token\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(username, password) {\n  return axios\n    .post(`/users/register`, { username, password })\n    .then(handleResponse);\n  // .then(login({ username, password }))\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  if (response.status !== 200) {\n    if (response.status === 401) {\n      // auto logout if 401 response returned from api\n      logout();\n      console.log(\"BAD\");\n      // location.reload(true);\n    }\n\n    // const error = (response && data.message) || response.statusText;\n    console.log(\"error\");\n    // return Promise.reject(error);\n  }\n  console.log(response);\n  return response.data;\n}\n"]},"metadata":{},"sourceType":"module"}