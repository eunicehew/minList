{"ast":null,"code":"// import config from \"config\";\nimport axios from \"axios\";\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n\n  if (user && user.token) {\n    return {\n      Authorization: \"Bearer \" + user.token\n    };\n  } else {\n    return {};\n  }\n}\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nasync function login(username, password) {\n  let config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  await axios.post(\"/users/authenticate\", {\n    username,\n    password\n  }, config).then(handleResponse).then(user => {\n    console.log(user); // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n    localStorage.setItem(\"user\", user);\n    return user;\n  }); // const requestOptions = {\n  //   method: \"POST\",\n  //   headers: { \"Content-Type\": \"application/json\" },\n  //   body: JSON.stringify({ username, password }),\n  // };\n  // await fetch(`/users/authenticate`, requestOptions)\n  //   .then(handleResponse)\n  //   .then((user) => {\n  //     // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //     localStorage.setItem(\"user\", JSON.stringify(user));\n  //     return user;\n  //   });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  axios.post(`/users/register`, user).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  console.log(response);\n  return response.data.then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {// auto logout if 401 response returned from api\n        // logout();\n        // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/services/UserService.js"],"names":["axios","authHeader","user","JSON","parse","localStorage","getItem","token","Authorization","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","config","headers","post","then","handleResponse","console","log","setItem","removeItem","requestOptions","method","fetch","id","body","stringify","response","data","text","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["// import config from \"config\";\nimport axios from \"axios\";\n\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n\n  if (user && user.token) {\n    return { Authorization: \"Bearer \" + user.token };\n  } else {\n    return {};\n  }\n}\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete,\n};\n\nasync function login(username, password) {\n  let config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  await axios\n    .post(\"/users/authenticate\", { username, password }, config)\n    .then(handleResponse)\n    .then((user) => {\n      console.log(user);\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem(\"user\", user);\n      return user;\n    });\n\n  // const requestOptions = {\n  //   method: \"POST\",\n  //   headers: { \"Content-Type\": \"application/json\" },\n  //   body: JSON.stringify({ username, password }),\n  // };\n\n  // await fetch(`/users/authenticate`, requestOptions)\n  //   .then(handleResponse)\n  //   .then((user) => {\n  //     // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //     localStorage.setItem(\"user\", JSON.stringify(user));\n\n  //     return user;\n  //   });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  axios.post(`/users/register`, user).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  console.log(response);\n  return response.data.then((text) => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        // logout();\n        // location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}