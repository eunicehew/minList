{"ast":null,"code":"// import config from \"config\";\nimport axios from \"axios\";\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n\n  if (user && user.token) {\n    return {\n      Authorization: \"Bearer \" + user.token\n    };\n  } else {\n    return {};\n  }\n}\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  axios.post(\"/users/authenticate\", {\n    username,\n    password\n  }) // .then(handleResponse)\n  .then(user => {\n    console.log(user); // store user details and jwt token in local storage to keep user logged in between page refreshes\n    // localStorage.setItem(\"user\", JSON.stringify(user));\n    // return user;\n  }); // const requestOptions = {\n  //   method: \"POST\",\n  //   headers: { \"Content-Type\": \"application/json\" },\n  //   body: JSON.stringify({ username, password }),\n  // };\n  // return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n  //   .then(handleResponse)\n  //   .then((user) => {\n  //     // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //     localStorage.setItem(\"user\", JSON.stringify(user));\n  //     return user;\n  //   });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  axios.post(`/users/register`, user).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  console.log(response);\n  return response.text().then(text => {\n    console.log(text);\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      console.log(response);\n\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/services/UserService.js"],"names":["axios","authHeader","user","JSON","parse","localStorage","getItem","token","Authorization","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","post","then","console","log","removeItem","requestOptions","method","headers","fetch","handleResponse","id","body","stringify","response","text","data","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["// import config from \"config\";\nimport axios from \"axios\";\n\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n\n  if (user && user.token) {\n    return { Authorization: \"Bearer \" + user.token };\n  } else {\n    return {};\n  }\n}\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete,\n};\n\nfunction login(username, password) {\n  axios\n    .post(\"/users/authenticate\", { username, password })\n    // .then(handleResponse)\n    .then((user) => {\n      console.log(user);\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      // localStorage.setItem(\"user\", JSON.stringify(user));\n      // return user;\n    });\n\n  // const requestOptions = {\n  //   method: \"POST\",\n  //   headers: { \"Content-Type\": \"application/json\" },\n  //   body: JSON.stringify({ username, password }),\n  // };\n\n  // return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n  //   .then(handleResponse)\n  //   .then((user) => {\n  //     // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //     localStorage.setItem(\"user\", JSON.stringify(user));\n\n  //     return user;\n  //   });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  axios.post(`/users/register`, user).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  console.log(response);\n  return response.text().then((text) => {\n    console.log(text);\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      console.log(response);\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        // location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}