{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport todoReducer from \"../redux/Todo\";\nimport alertReducer from \"../redux/Alert\";\nimport loginReducer from \"../redux/Login\";\nimport registerReducer from \"../redux/Register\";\nimport pageReducer from \"../redux/Page\";\nimport sheetReducer from \"../redux/Sheet\";\nimport listReducer from \"../redux/List\";\nimport itemReducer from \"../redux/Item\";\nimport uiReducer from \"../redux/UI\";\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst reducers = combineReducers({\n  todoState: todoReducer,\n  alertState: alertReducer,\n  loginState: loginReducer,\n  registerState: registerReducer,\n  pageState: pageReducer,\n  sheetState: sheetReducer,\n  listState: listReducer,\n  itemState: itemReducer,\n  uiState: uiReducer\n});\nexport const LOGOUT = \"components/LOGOUT\";\n\nconst rootReducer = (state, action) => {\n  if (action.type === LOGOUT) {\n    localStorage.clear();\n    state = {\n      \"uiState\": {\n        \"theme\": state.uiState.theme,\n        \"menuOpen\": false\n      }\n    };\n  }\n\n  return reducers(state, action);\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst store = createStore(persistedReducer, applyMiddleware(thunk));\nconst persistor = persistStore(store);\nexport { store, persistor };","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/app/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","persistStore","persistReducer","storage","todoReducer","alertReducer","loginReducer","registerReducer","pageReducer","sheetReducer","listReducer","itemReducer","uiReducer","persistConfig","key","reducers","todoState","alertState","loginState","registerState","pageState","sheetState","listState","itemState","uiState","LOGOUT","rootReducer","state","action","type","localStorage","clear","theme","persistedReducer","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBX,EAAAA;AAFoB,CAAtB;AAKA,MAAMY,QAAQ,GAAGjB,eAAe,CAAC;AAC/BkB,EAAAA,SAAS,EAAEZ,WADoB;AAE/Ba,EAAAA,UAAU,EAAEZ,YAFmB;AAG/Ba,EAAAA,UAAU,EAAEZ,YAHmB;AAI/Ba,EAAAA,aAAa,EAAEZ,eAJgB;AAK/Ba,EAAAA,SAAS,EAAEZ,WALoB;AAM/Ba,EAAAA,UAAU,EAAEZ,YANmB;AAO/Ba,EAAAA,SAAS,EAAEZ,WAPoB;AAQ/Ba,EAAAA,SAAS,EAAEZ,WARoB;AAS/Ba,EAAAA,OAAO,EAAEZ;AATsB,CAAD,CAAhC;AAYA,OAAO,MAAMa,MAAM,GAAG,mBAAf;;AACP,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgBJ,MAApB,EAA4B;AAC1BK,IAAAA,YAAY,CAACC,KAAb;AACAJ,IAAAA,KAAK,GAAG;AACN,iBACA;AAAC,iBAASA,KAAK,CAACH,OAAN,CAAcQ,KAAxB;AAA+B,oBAAY;AAA3C;AAFM,KAAR;AAID;;AACD,SAAOjB,QAAQ,CAACY,KAAD,EAAQC,MAAR,CAAf;AACD,CATD;;AAWA,MAAMK,gBAAgB,GAAG/B,cAAc,CAACW,aAAD,EAAgBa,WAAhB,CAAvC;AAGA,MAAMQ,KAAK,GAAGrC,WAAW,CAACoC,gBAAD,EAAmBlC,eAAe,CAACC,KAAD,CAAlC,CAAzB;AACA,MAAMmC,SAAS,GAAGlC,YAAY,CAACiC,KAAD,CAA9B;AACA,SAASA,KAAT,EAAgBC,SAAhB","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport todoReducer from \"../redux/Todo\";\r\nimport alertReducer from \"../redux/Alert\";\r\nimport loginReducer from \"../redux/Login\";\r\nimport registerReducer from \"../redux/Register\";\r\nimport pageReducer from \"../redux/Page\";\r\nimport sheetReducer from \"../redux/Sheet\";\r\nimport listReducer from \"../redux/List\";\r\nimport itemReducer from \"../redux/Item\";\r\nimport uiReducer from \"../redux/UI\";\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n \r\nconst reducers = combineReducers({\r\n  todoState: todoReducer,\r\n  alertState: alertReducer,\r\n  loginState: loginReducer,\r\n  registerState: registerReducer,\r\n  pageState: pageReducer,\r\n  sheetState: sheetReducer,\r\n  listState: listReducer,\r\n  itemState: itemReducer,\r\n  uiState: uiReducer,\r\n});\r\n\r\nexport const LOGOUT = \"components/LOGOUT\";\r\nconst rootReducer = (state, action) => {\r\n  if (action.type === LOGOUT) {\r\n    localStorage.clear()\r\n    state = {\r\n      \"uiState\":\r\n      {\"theme\": state.uiState.theme, \"menuOpen\": false}\r\n    };\r\n  }\r\n  return reducers(state, action);\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n\r\nconst store = createStore(persistedReducer, applyMiddleware(thunk))\r\nconst persistor = persistStore(store)\r\nexport { store, persistor }\r\n"]},"metadata":{},"sourceType":"module"}