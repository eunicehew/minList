{"ast":null,"code":"// import { configureStore } from \"@reduxjs/toolkit\";\n// import counterReducer from \"../features/counter/counterSlice\";\n// export default configureStore({\n//   reducer: {\n//     counter: counterReducer,\n//     todos: todoReducer\n//   }\n// });\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // import { setToken } from \"../services/ServiceHelpers\";\n\nimport todoReducer from \"../redux/Todo\";\nimport alertReducer from \"../redux/Alert\";\nimport loginReducer from \"../redux/Login\";\nimport registerReducer from \"../redux/Register\";\nimport pageReducer from \"../redux/Page\";\nimport sheetReducer from \"../redux/Sheet\";\nimport listReducer from \"../redux/List\";\nimport itemReducer from \"../redux/Item\";\nimport uiReducer from \"../redux/UI\";\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst reducers = combineReducers({\n  todoState: todoReducer,\n  alertState: alertReducer,\n  loginState: loginReducer,\n  registerState: registerReducer,\n  pageState: pageReducer,\n  sheetState: sheetReducer,\n  listState: listReducer,\n  itemState: itemReducer,\n  uiState: uiReducer\n});\nconst persistedReducer = persistReducer(persistConfig, reducers); // const saveAuthToken = (store) => (next) => (action) => {\n//   if (action.type === \"components/Home/LOGIN_SUCCESS\") {\n//     // after a successful login, update the token in the API\n//     setToken(action.user.token);\n//   }\n//   return next(action);\n// };\n\nconst store = createStore(persistedReducer, applyMiddleware(thunk));\nconst persistor = persistStore(store);\nexport { store, persistor }; // export const store = createStore(reducers, applyMiddleware(thunk));","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/app/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","persistStore","persistReducer","storage","todoReducer","alertReducer","loginReducer","registerReducer","pageReducer","sheetReducer","listReducer","itemReducer","uiReducer","persistConfig","key","reducers","todoState","alertState","loginState","registerState","pageState","sheetState","listState","itemState","uiState","persistedReducer","store","persistor"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBX,EAAAA;AAFoB,CAAtB;AAKA,MAAMY,QAAQ,GAAGjB,eAAe,CAAC;AAC/BkB,EAAAA,SAAS,EAAEZ,WADoB;AAE/Ba,EAAAA,UAAU,EAAEZ,YAFmB;AAG/Ba,EAAAA,UAAU,EAAEZ,YAHmB;AAI/Ba,EAAAA,aAAa,EAAEZ,eAJgB;AAK/Ba,EAAAA,SAAS,EAAEZ,WALoB;AAM/Ba,EAAAA,UAAU,EAAEZ,YANmB;AAO/Ba,EAAAA,SAAS,EAAEZ,WAPoB;AAQ/Ba,EAAAA,SAAS,EAAEZ,WARoB;AAS/Ba,EAAAA,OAAO,EAAEZ;AATsB,CAAD,CAAhC;AAYA,MAAMa,gBAAgB,GAAGvB,cAAc,CAACW,aAAD,EAAgBE,QAAhB,CAAvC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMW,KAAK,GAAG7B,WAAW,CAAC4B,gBAAD,EAAmB1B,eAAe,CAACC,KAAD,CAAlC,CAAzB;AACA,MAAM2B,SAAS,GAAG1B,YAAY,CAACyB,KAAD,CAA9B;AACA,SAASA,KAAT,EAAgBC,SAAhB,G,CACA","sourcesContent":["// import { configureStore } from \"@reduxjs/toolkit\";\r\n// import counterReducer from \"../features/counter/counterSlice\";\r\n\r\n// export default configureStore({\r\n//   reducer: {\r\n//     counter: counterReducer,\r\n//     todos: todoReducer\r\n//   }\r\n// });\r\n\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n// import { setToken } from \"../services/ServiceHelpers\";\r\nimport todoReducer from \"../redux/Todo\";\r\nimport alertReducer from \"../redux/Alert\";\r\nimport loginReducer from \"../redux/Login\";\r\nimport registerReducer from \"../redux/Register\";\r\nimport pageReducer from \"../redux/Page\";\r\nimport sheetReducer from \"../redux/Sheet\";\r\nimport listReducer from \"../redux/List\";\r\nimport itemReducer from \"../redux/Item\";\r\nimport uiReducer from \"../redux/UI\";\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n \r\nconst reducers = combineReducers({\r\n  todoState: todoReducer,\r\n  alertState: alertReducer,\r\n  loginState: loginReducer,\r\n  registerState: registerReducer,\r\n  pageState: pageReducer,\r\n  sheetState: sheetReducer,\r\n  listState: listReducer,\r\n  itemState: itemReducer,\r\n  uiState: uiReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers)\r\n\r\n// const saveAuthToken = (store) => (next) => (action) => {\r\n//   if (action.type === \"components/Home/LOGIN_SUCCESS\") {\r\n//     // after a successful login, update the token in the API\r\n//     setToken(action.user.token);\r\n//   }\r\n//   return next(action);\r\n// };\r\n\r\n\r\nconst store = createStore(persistedReducer, applyMiddleware(thunk))\r\nconst persistor = persistStore(store)\r\nexport { store, persistor }\r\n// export const store = createStore(reducers, applyMiddleware(thunk));\r\n"]},"metadata":{},"sourceType":"module"}