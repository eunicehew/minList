{"ast":null,"code":"import { userService } from \"../services/UserService\";\nimport { getPages } from \"./Page\";\nimport { errorAlert } from \"./Alert\"; //Actions\n\nconst LOGIN_REQUEST = \"components/Home/LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"components/Home/LOGIN_SUCCESS\";\nconst LOGIN_FAILURE = \"components/Home/LOGIN_FAILURE\";\nconst LOGOUT = \"components/Home/LOGOUT\"; //Reducer\n\nlet user = localStorage.getItem(\"user\");\nconst initialState = user ? {\n  logginIn: false,\n  loggedIn: true,\n  user\n} : {\n  loggingIn: false,\n  loggedIn: false,\n  user: {}\n};\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return Object.assign({}, state, {\n        loggingIn: true\n      });\n\n    case LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        loggedIn: true,\n        user: action.user\n      });\n\n    case LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        error: action.error\n      });\n\n    case LOGOUT:\n      return Object.assign({}, state, {\n        user: {},\n        logout: true\n      });\n\n    default:\n      return state;\n  }\n} //Action Creators\n\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    userService.login(username, password).then(user => {\n      dispatch(success(user));\n      dispatch(getPages());\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(errorAlert(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: LOGIN_FAILURE,\n      error\n    };\n  }\n}\nexport function logout(history) {\n  return dispatch => {\n    dispatch({\n      type: LOGOUT\n    });\n    userService.logout();\n    history.push(`/`);\n  };\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/redux/Login.js"],"names":["userService","getPages","errorAlert","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","user","localStorage","getItem","initialState","logginIn","loggedIn","loggingIn","loginReducer","state","action","type","Object","assign","error","logout","login","username","password","dispatch","request","then","success","failure","toString","history","push"],"mappings":"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","sourcesContent":["import { userService } from \"../services/UserService\";\nimport { getPages } from \"./Page\";\nimport { errorAlert } from \"./Alert\";\n\n//Actions\nconst LOGIN_REQUEST = \"components/Home/LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"components/Home/LOGIN_SUCCESS\";\nconst LOGIN_FAILURE = \"components/Home/LOGIN_FAILURE\";\nconst LOGOUT = \"components/Home/LOGOUT\";\n\n//Reducer\nlet user = localStorage.getItem(\"user\");\nconst initialState = user\n  ? { logginIn: false, loggedIn: true, user }\n  : { loggingIn: false, loggedIn: false, user: {} };\n\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return Object.assign({}, state, {\n        loggingIn: true,\n      });\n    case LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        loggedIn: true,\n        user: action.user,\n      });\n    case LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        error: action.error,\n      });\n    case LOGOUT:\n      return Object.assign({}, state, {\n        user: {},\n        logout: true,\n      });\n    default:\n      return state;\n  }\n}\n\n//Action Creators\nexport function login(username, password) {\n  return (dispatch) => {\n    dispatch(request({ username }));\n    userService.login(username, password).then(\n      (user) => {\n        dispatch(success(user));\n        dispatch(getPages());\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        dispatch(errorAlert(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: LOGIN_REQUEST, user };\n  }\n  function success(user) {\n    return { type: LOGIN_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: LOGIN_FAILURE, error };\n  }\n}\n\nexport function logout(history) {\n  return (dispatch) => {\n    dispatch({ type: LOGOUT });\n    userService.logout();\n    history.push(`/`);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}