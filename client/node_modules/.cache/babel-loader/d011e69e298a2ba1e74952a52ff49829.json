{"ast":null,"code":"import { userService } from \"../../../services/UserService\";\nimport { history } from \"../../../app/history\"; // import { login } from \"./Login\";\n//Actions\n\nconst REGISTER_REQUEST = \"components/Home/REGISTER_REQUEST\";\nconst REGISTER_SUCCESS = \"components/Home/REGISTER_SUCCESS\";\nconst REGISTER_FAILURE = \"components/Home/REGISTER_FAILURE\"; //Reducer\n\nexport default function registerReducer(state = {}, action) {\n  switch (action.type) {\n    case REGISTER_REQUEST:\n      return Object.assign({}, state, {\n        registering: true\n      });\n\n    case REGISTER_SUCCESS:\n      return Object.assign({}, state, {\n        registered: true\n      });\n\n    case REGISTER_FAILURE:\n      return Object.assign({}, state, {\n        error: true\n      });\n\n    default:\n      return state;\n  }\n} //Action Creators\n\nexport function register(username, password) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    userService.register(username, password).then(user => {\n      dispatch(success(user)); // dispatch(login(username, password));\n      //login\n      // history.push(\"/todo\");\n      // dispatch(alertActions.success(\"Registration successful\"));\n    }, error => {\n      console.log(\"error\");\n      history.push(\"/todo\");\n      dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function login(username, password) {\n    console.log(\"login function\");\n    return dispatch => {\n      dispatch(request({\n        username\n      }));\n      userService.login(username, password).then(user => {\n        console.log(user);\n        dispatch(success(user));\n        history.push(\"/todo\");\n      }, error => {\n        dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n      });\n    };\n  }\n\n  function request(user) {\n    return {\n      type: REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: REGISTER_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/components/home/ducks/Register.js"],"names":["userService","history","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","registerReducer","state","action","type","Object","assign","registering","registered","error","register","username","password","dispatch","request","then","user","success","console","log","push","failure","toString","login"],"mappings":"AAAA,SAASA,WAAT,QAA4B,+BAA5B;AACA,SAASC,OAAT,QAAwB,sBAAxB,C,CACA;AAEA;;AACA,MAAMC,gBAAgB,GAAG,kCAAzB;AACA,MAAMC,gBAAgB,GAAG,kCAAzB;AACA,MAAMC,gBAAgB,GAAG,kCAAzB,C,CAEA;;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAK,GAAG,EAAjC,EAAqCC,MAArC,EAA6C;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,gBAAL;AACE,aAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BK,QAAAA,WAAW,EAAE;AADiB,OAAzB,CAAP;;AAGF,SAAKR,gBAAL;AACE,aAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BM,QAAAA,UAAU,EAAE;AADkB,OAAzB,CAAP;;AAGF,SAAKR,gBAAL;AACE,aAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BO,QAAAA,KAAK,EAAE;AADuB,OAAzB,CAAP;;AAGF;AACE,aAAOP,KAAP;AAdJ;AAgBD,C,CAED;;AACA,OAAO,SAASQ,QAAT,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsC;AAC3C,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,OAAO,CAAC;AAAEH,MAAAA;AAAF,KAAD,CAAR,CAAR;AAEAf,IAAAA,WAAW,CAACc,QAAZ,CAAqBC,QAArB,EAA+BC,QAA/B,EAAyCG,IAAzC,CACGC,IAAD,IAAU;AACRH,MAAAA,QAAQ,CAACI,OAAO,CAACD,IAAD,CAAR,CAAR,CADQ,CAER;AAEA;AACA;AACA;AACD,KARH,EASGP,KAAD,IAAW;AACTS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAtB,MAAAA,OAAO,CAACuB,IAAR,CAAa,OAAb;AAEAP,MAAAA,QAAQ,CAACQ,OAAO,CAACZ,KAAK,CAACa,QAAN,EAAD,CAAR,CAAR,CAJS,CAKT;AACD,KAfH;AAiBD,GApBD;;AAsBA,WAASC,KAAT,CAAeZ,QAAf,EAAyBC,QAAzB,EAAmC;AACjCM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAQN,QAAD,IAAc;AACnBA,MAAAA,QAAQ,CAACC,OAAO,CAAC;AAAEH,QAAAA;AAAF,OAAD,CAAR,CAAR;AACAf,MAAAA,WAAW,CAAC2B,KAAZ,CAAkBZ,QAAlB,EAA4BC,QAA5B,EAAsCG,IAAtC,CACGC,IAAD,IAAU;AACRE,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAH,QAAAA,QAAQ,CAACI,OAAO,CAACD,IAAD,CAAR,CAAR;AACAnB,QAAAA,OAAO,CAACuB,IAAR,CAAa,OAAb;AACD,OALH,EAMGX,KAAD,IAAW;AACTI,QAAAA,QAAQ,CAACQ,OAAO,CAACZ,KAAK,CAACa,QAAN,EAAD,CAAR,CAAR,CADS,CAET;AACD,OATH;AAWD,KAbD;AAcD;;AAED,WAASR,OAAT,CAAiBE,IAAjB,EAAuB;AACrB,WAAO;AAAEZ,MAAAA,IAAI,EAAEN,gBAAR;AAA0BkB,MAAAA;AAA1B,KAAP;AACD;;AACD,WAASC,OAAT,CAAiBD,IAAjB,EAAuB;AACrB,WAAO;AAAEZ,MAAAA,IAAI,EAAEL,gBAAR;AAA0BiB,MAAAA;AAA1B,KAAP;AACD;;AACD,WAASK,OAAT,CAAiBZ,KAAjB,EAAwB;AACtB,WAAO;AAAEL,MAAAA,IAAI,EAAEJ,gBAAR;AAA0BS,MAAAA;AAA1B,KAAP;AACD;AACF","sourcesContent":["import { userService } from \"../../../services/UserService\";\nimport { history } from \"../../../app/history\";\n// import { login } from \"./Login\";\n\n//Actions\nconst REGISTER_REQUEST = \"components/Home/REGISTER_REQUEST\";\nconst REGISTER_SUCCESS = \"components/Home/REGISTER_SUCCESS\";\nconst REGISTER_FAILURE = \"components/Home/REGISTER_FAILURE\";\n\n//Reducer\nexport default function registerReducer(state = {}, action) {\n  switch (action.type) {\n    case REGISTER_REQUEST:\n      return Object.assign({}, state, {\n        registering: true,\n      });\n    case REGISTER_SUCCESS:\n      return Object.assign({}, state, {\n        registered: true,\n      });\n    case REGISTER_FAILURE:\n      return Object.assign({}, state, {\n        error: true,\n      });\n    default:\n      return state;\n  }\n}\n\n//Action Creators\nexport function register(username, password) {\n  return (dispatch) => {\n    dispatch(request({ username }));\n\n    userService.register(username, password).then(\n      (user) => {\n        dispatch(success(user));\n        // dispatch(login(username, password));\n\n        //login\n        // history.push(\"/todo\");\n        // dispatch(alertActions.success(\"Registration successful\"));\n      },\n      (error) => {\n        console.log(\"error\");\n        history.push(\"/todo\");\n\n        dispatch(failure(error.toString()));\n        // dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function login(username, password) {\n    console.log(\"login function\");\n    return (dispatch) => {\n      dispatch(request({ username }));\n      userService.login(username, password).then(\n        (user) => {\n          console.log(user);\n          dispatch(success(user));\n          history.push(\"/todo\");\n        },\n        (error) => {\n          dispatch(failure(error.toString()));\n          // dispatch(alertActions.error(error.toString()));\n        }\n      );\n    };\n  }\n\n  function request(user) {\n    return { type: REGISTER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: REGISTER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: REGISTER_FAILURE, error };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}