{"ast":null,"code":"var _jsxFileName = \"/Users/Eunice/Documents/my-app/client/src/components/common/List/List.js\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport List from \"@material-ui/core/List\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { DraggableListItem, ListItemButtons } from \"./ListItems\";\nimport { AddDialog } from \"../Dialog.js\";\nimport TextField from \"@material-ui/core/TextField\"; // const ListCard = ({ isDraggable, listId, addItem, deleteItem, ...rest }) => {\n//   const onDragOver = (event) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"lightgray\";\n//     // event.currentTarget.style.cursor = \"grabbing\";\n//   };\n//   const onDrop = (event, listId, addItem, deleteItem) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"\";\n//     // event.currentTarget.style.cursor = \"default\";\n//     let itemId = event.dataTransfer.getData(\"item\");\n//     let selectedItem = this.props.items.find((i) => i._id === itemId);\n//     if (listId !== event.target._id) {\n//       //get id of new list\n//       //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n//       const oldList = { listId: listId, ...selectedItem };\n//       const newList = { listId: event.target._id, ...selectedItem };\n//       addItem(newList);\n//       deleteItem(oldList);\n//     }\n//   };\n//   const onDragLeave = (event) => {\n//     event.currentTarget.style.background = \"\";\n//   };\n//   return isDraggable ? (\n//     <Card\n//       onDragOver={(event) => onDragOver(event)}\n//       onDrop={(event) => onDrop(event, listId, addItem, deleteItem)}\n//       onDragLeave={(event) => onDragLeave(event)}\n//       style={{ height: \"30vw\", width: \"30vw\" }}\n//     >\n//       {rest}\n//     </Card>\n//   ) : (\n//     <Card style={{ height: \"30vw\", width: \"30vw\" }}>{rest}</Card>\n//   );\n// };\n\nconst DraggableList = ({\n  isDraggable,\n  sheetId,\n  listId,\n  header,\n  items,\n  addItem,\n  editItem,\n  deleteItem\n}) => {\n  const onDragOver = event => {\n    event.preventDefault();\n    event.currentTarget.style.background = \"lightgray\"; // event.currentTarget.style.cursor = \"grabbing\";\n  };\n\n  const onDrop = (event, listId, items, addItem, deleteItem) => {\n    console.log(items);\n    console.log(listId); //is the list you drop to --how to get original??\n\n    event.preventDefault();\n    event.currentTarget.style.background = \"\"; // event.currentTarget.style.cursor = \"default\";\n\n    let itemId = event.dataTransfer.getData(\"item\");\n    let selectedItem = items.find(i => i._id === itemId);\n    console.log(itemId);\n    console.log(selectedItem);\n    console.log(event.target._id);\n\n    if (listId !== event.target._id) {\n      //get id of new list\n      //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n      const oldList = {\n        listId: listId,\n        ...selectedItem\n      };\n      const newList = {\n        listId: event.target._id,\n        ...selectedItem\n      };\n      console.log(oldList);\n      console.log(newList); // addItem(newList);\n      // deleteItem(oldList);\n      //move item id from old to new list\n    } else {\n      console.log(\"else\"); // const reorderList = {}\n      //find the new position of the item\n      //edit its position in list\n    }\n  };\n\n  const onDragLeave = event => {\n    event.currentTarget.style.background = \"\";\n  };\n\n  const onMouseOver = event => {\n    event.currentTarget.style.cursor = \"grab\";\n  };\n\n  const onDragStart = (event, item, listId) => {\n    console.log(item);\n    console.log(listId);\n    originalList = listId;\n    event.currentTarget.style.border = \"dashed\";\n    event.dataTransfer.setData(\"item\", item); // event.currentTarget.style.cursor = \"grabbing\";\n  };\n\n  const originalList = undefined;\n  const newList = undefined;\n  console.log(originalList);\n\n  const onDragEnd = event => {\n    event.currentTarget.style.border = \"\";\n    event.currentTarget.style.background = \"\"; // event.currentTarget.style.cursor = \"default\";\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    onDragOver: event => onDragOver(event),\n    onDrop: event => onDrop(event, listId, items, addItem, deleteItem),\n    onDragLeave: event => onDragLeave(event),\n    style: {\n      height: \"30vw\",\n      width: \"30vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    style: {\n      margin: \"10px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, header), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, items && items.length > 0 ? items.map(item => {\n    return /*#__PURE__*/React.createElement(DraggableListItem, {\n      key: item._id,\n      isDraggable: true // isDraggable={isDraggable || false}\n      ,\n      listId: listId,\n      item: item,\n      onMouseOver: onMouseOver,\n      onDragStart: onDragStart,\n      onDragEnd: onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, \"No items \"))), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddDialog, {\n    header: \"Add Item\",\n    fields: {\n      \"Item Name\": \"name\"\n    } // specialFields={[\n    //   (changeFunction) => {\n    //     return (\n    //       <TextField\n    //         margin=\"dense\"\n    //         key=\"Description\"\n    //         id=\"details\"\n    //         label=\"Description\"\n    //         fullWidth\n    //         multiline\n    //         required\n    //         type=\"text\"\n    //         onChange={changeFunction}\n    //       />\n    //     );\n    //   },\n    // ]}\n    ,\n    addFunction: addItem,\n    body: {\n      listId: listId,\n      sheetId: sheetId\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport { DraggableList };","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/components/common/List/List.js"],"names":["React","Card","CardContent","CardActions","List","ListItemText","DraggableListItem","ListItemButtons","AddDialog","TextField","DraggableList","isDraggable","sheetId","listId","header","items","addItem","editItem","deleteItem","onDragOver","event","preventDefault","currentTarget","style","background","onDrop","console","log","itemId","dataTransfer","getData","selectedItem","find","i","_id","target","oldList","newList","onDragLeave","onMouseOver","cursor","onDragStart","item","originalList","border","setData","undefined","onDragEnd","height","width","margin","length","map","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport List from \"@material-ui/core/List\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { DraggableListItem, ListItemButtons } from \"./ListItems\";\nimport { AddDialog } from \"../Dialog.js\";\nimport TextField from \"@material-ui/core/TextField\";\n\n// const ListCard = ({ isDraggable, listId, addItem, deleteItem, ...rest }) => {\n//   const onDragOver = (event) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"lightgray\";\n//     // event.currentTarget.style.cursor = \"grabbing\";\n//   };\n//   const onDrop = (event, listId, addItem, deleteItem) => {\n//     event.preventDefault();\n//     event.currentTarget.style.background = \"\";\n//     // event.currentTarget.style.cursor = \"default\";\n//     let itemId = event.dataTransfer.getData(\"item\");\n//     let selectedItem = this.props.items.find((i) => i._id === itemId);\n//     if (listId !== event.target._id) {\n//       //get id of new list\n//       //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n//       const oldList = { listId: listId, ...selectedItem };\n//       const newList = { listId: event.target._id, ...selectedItem };\n//       addItem(newList);\n//       deleteItem(oldList);\n//     }\n//   };\n//   const onDragLeave = (event) => {\n//     event.currentTarget.style.background = \"\";\n//   };\n//   return isDraggable ? (\n//     <Card\n//       onDragOver={(event) => onDragOver(event)}\n//       onDrop={(event) => onDrop(event, listId, addItem, deleteItem)}\n//       onDragLeave={(event) => onDragLeave(event)}\n//       style={{ height: \"30vw\", width: \"30vw\" }}\n//     >\n//       {rest}\n//     </Card>\n//   ) : (\n//     <Card style={{ height: \"30vw\", width: \"30vw\" }}>{rest}</Card>\n//   );\n// };\n\nconst DraggableList = ({\n  isDraggable,\n  sheetId,\n  listId,\n  header,\n  items,\n  addItem,\n  editItem,\n  deleteItem,\n}) => {\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.currentTarget.style.background = \"lightgray\";\n    // event.currentTarget.style.cursor = \"grabbing\";\n  };\n  const onDrop = (event, listId, items, addItem, deleteItem) => {\n    console.log(items);\n    console.log(listId); //is the list you drop to --how to get original??\n    event.preventDefault();\n    event.currentTarget.style.background = \"\";\n    // event.currentTarget.style.cursor = \"default\";\n    let itemId = event.dataTransfer.getData(\"item\");\n    let selectedItem = items.find((i) => i._id === itemId);\n    console.log(itemId);\n    console.log(selectedItem);\n    console.log(event.target._id);\n    if (listId !== event.target._id) {\n      //get id of new list\n      //THIS IS DEFINITELY WRONG--UPDATE WHEN WE GET TO DOING ITEMS\n      const oldList = { listId: listId, ...selectedItem };\n      const newList = { listId: event.target._id, ...selectedItem };\n      console.log(oldList);\n      console.log(newList);\n      // addItem(newList);\n      // deleteItem(oldList);\n      //move item id from old to new list\n    } else {\n      console.log(\"else\");\n      // const reorderList = {}\n      //find the new position of the item\n      //edit its position in list\n    }\n  };\n  const onDragLeave = (event) => {\n    event.currentTarget.style.background = \"\";\n  };\n\n  const onMouseOver = (event) => {\n    event.currentTarget.style.cursor = \"grab\";\n  };\n  const onDragStart = (event, item, listId) => {\n    console.log(item);\n    console.log(listId);\n    originalList = listId;\n    event.currentTarget.style.border = \"dashed\";\n    event.dataTransfer.setData(\"item\", item);\n\n    // event.currentTarget.style.cursor = \"grabbing\";\n  };\n  const originalList = undefined;\n  const newList = undefined;\n  console.log(originalList);\n\n  const onDragEnd = (event) => {\n    event.currentTarget.style.border = \"\";\n    event.currentTarget.style.background = \"\";\n    // event.currentTarget.style.cursor = \"default\";\n  };\n\n  return (\n    <Card\n      onDragOver={(event) => onDragOver(event)}\n      onDrop={(event) => onDrop(event, listId, items, addItem, deleteItem)}\n      onDragLeave={(event) => onDragLeave(event)}\n      style={{ height: \"30vw\", width: \"30vw\" }}\n    >\n      {/* // <ListCard\n    //   isDraggable={isDraggable || false}\n    //   listId={listId}\n    //   addItem={addItem}\n    //   deleteItem={deleteItem}\n    // > */}\n      <h4 style={{ margin: \"10px 0px\" }}>{header}</h4>\n      <List>\n        <CardContent>\n          {items && items.length > 0 ? (\n            items.map((item) => {\n              return (\n                <DraggableListItem\n                  key={item._id}\n                  isDraggable\n                  // isDraggable={isDraggable || false}\n                  listId={listId}\n                  item={item}\n                  onMouseOver={onMouseOver}\n                  onDragStart={onDragStart}\n                  onDragEnd={onDragEnd}\n                >\n                  <ListItemText primary={item.name} />\n                  {/* <ListItemButtons\n                    item={item}\n                    editItem={editItem}\n                    deleteItem={deleteItem}\n                  /> */}\n                </DraggableListItem>\n              );\n            })\n          ) : (\n            <li>No items </li>\n          )}\n        </CardContent>\n      </List>\n      <CardActions>\n        <AddDialog\n          header=\"Add Item\"\n          fields={{ \"Item Name\": \"name\" }}\n          // specialFields={[\n          //   (changeFunction) => {\n          //     return (\n          //       <TextField\n          //         margin=\"dense\"\n          //         key=\"Description\"\n          //         id=\"details\"\n          //         label=\"Description\"\n          //         fullWidth\n          //         multiline\n          //         required\n          //         type=\"text\"\n          //         onChange={changeFunction}\n          //       />\n          //     );\n          //   },\n          // ]}\n          addFunction={addItem}\n          body={{ listId: listId, sheetId: sheetId }}\n        />\n      </CardActions>\n      {/* </ListCard> */}\n    </Card>\n  );\n};\n\nexport { DraggableList };\n"]},"metadata":{},"sourceType":"module"}