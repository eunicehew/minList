{"ast":null,"code":"// import config from \"config\";\nimport axios from \"axios\";\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n\n  if (user && user.token) {\n    return {\n      Authorization: \"Bearer \" + user.token\n    };\n  } else {\n    return {};\n  }\n}\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  let config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return axios.post(\"/users/authenticate\", {\n    username,\n    password\n  }, config).then(handleResponse); // .then((response) => {\n  //   // console.log(response);\n  //   if (response.status !== 200) {\n  //     console.log(\"Error\");\n  //   } else {\n  //     const user = response.data.username;\n  //     // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //     localStorage.setItem(\"user\", user);\n  //     localStorage.setItem(\"hash\", response.data.passwordHash);\n  //     console.log(user);\n  //     return user;\n  //   }\n  // })\n} // .then((user) => {\n//   console.log(user);\n//   // store user details and jwt token in local storage to keep user logged in between page refreshes\n//   localStorage.setItem(\"user\", user);\n//   return user;\n// });\n\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  return axios.post(`/users/register`, user).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  // return response.then((data) => {\n  if (response.status !== 200) {\n    if (response.status === 401) {\n      // auto logout if 401 response returned from api\n      // logout();\n      console.log(\"BAD\"); // location.reload(true);\n    } // const error = (response && data.message) || response.statusText;\n\n\n    console.log(response);\n    return Promise.reject(error);\n  }\n\n  console.log(response);\n  return response; // });\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/services/UserService.js"],"names":["axios","authHeader","user","JSON","parse","localStorage","getItem","token","Authorization","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","config","headers","post","then","handleResponse","removeItem","requestOptions","method","fetch","id","body","stringify","response","status","console","log","Promise","reject","error"],"mappings":"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","sourcesContent":["// import config from \"config\";\nimport axios from \"axios\";\n\nexport function authHeader() {\n  // return authorization header with jwt token\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n\n  if (user && user.token) {\n    return { Authorization: \"Bearer \" + user.token };\n  } else {\n    return {};\n  }\n}\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete,\n};\n\nfunction login(username, password) {\n  let config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return axios\n    .post(\"/users/authenticate\", { username, password }, config)\n    .then(handleResponse);\n\n  // .then((response) => {\n  //   // console.log(response);\n  //   if (response.status !== 200) {\n  //     console.log(\"Error\");\n  //   } else {\n  //     const user = response.data.username;\n  //     // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //     localStorage.setItem(\"user\", user);\n  //     localStorage.setItem(\"hash\", response.data.passwordHash);\n  //     console.log(user);\n  //     return user;\n  //   }\n  // })\n}\n// .then((user) => {\n//   console.log(user);\n//   // store user details and jwt token in local storage to keep user logged in between page refreshes\n//   localStorage.setItem(\"user\", user);\n//   return user;\n// });\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  return axios.post(`/users/register`, user).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  // return response.then((data) => {\n  if (response.status !== 200) {\n    if (response.status === 401) {\n      // auto logout if 401 response returned from api\n      // logout();\n      console.log(\"BAD\");\n      // location.reload(true);\n    }\n\n    // const error = (response && data.message) || response.statusText;\n    console.log(response);\n    return Promise.reject(error);\n  }\n  console.log(response);\n  return response;\n  // });\n}\n"]},"metadata":{},"sourceType":"module"}