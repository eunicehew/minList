{"ast":null,"code":"// import config from \"config\";\nimport axios from \"axios\";\nimport { authHeader, handleResponse } from \"./ServiceHelpers\";\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  console.log(\"login\");\n  return axios.post(\"/users/authenticate\", {\n    username,\n    password\n  }).then(handleResponse).then(data => {\n    const user = data.username; // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n    localStorage.setItem(\"user\", user);\n    localStorage.setItem(\"token\", data.token);\n    console.log(user);\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"token\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(username, password) {\n  return axios.post(`/users/register`, {\n    username,\n    password\n  }).then(handleResponse); // .then(login({ username, password }))\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/services/UserService.js"],"names":["axios","authHeader","handleResponse","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","console","log","post","then","data","user","localStorage","setItem","token","removeItem","requestOptions","method","headers","fetch","id","body","JSON","stringify"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,KADyB;AAEzBC,EAAAA,MAFyB;AAGzBC,EAAAA,QAHyB;AAIzBC,EAAAA,MAJyB;AAKzBC,EAAAA,OALyB;AAMzBC,EAAAA,MANyB;AAOzBC,EAAAA,MAAM,EAAEC;AAPiB,CAApB;;AAUP,SAASP,KAAT,CAAeQ,QAAf,EAAyBC,QAAzB,EAAmC;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,SAAOf,KAAK,CACTgB,IADI,CACC,qBADD,EACwB;AAAEJ,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GADxB,EAEJI,IAFI,CAECf,cAFD,EAGJe,IAHI,CAGEC,IAAD,IAAU;AACd,UAAMC,IAAI,GAAGD,IAAI,CAACN,QAAlB,CADc,CAEd;;AACAQ,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BF,IAA7B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,IAAI,CAACI,KAAnC;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACA,WAAOA,IAAP;AACD,GAVI,CAAP;AAWD;;AAED,SAASd,MAAT,GAAkB;AAChB;AACAe,EAAAA,YAAY,CAACG,UAAb,CAAwB,MAAxB;AACAH,EAAAA,YAAY,CAACG,UAAb,CAAwB,OAAxB;AACD;;AAED,SAAShB,MAAT,GAAkB;AAChB,QAAMiB,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAEzB,UAAU;AAFE,GAAvB;AAKA,SAAO0B,KAAK,CAAE,SAAF,EAAYH,cAAZ,CAAL,CAAiCP,IAAjC,CAAsCf,cAAtC,CAAP;AACD;;AAED,SAASM,OAAT,CAAiBoB,EAAjB,EAAqB;AACnB,QAAMJ,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAEzB,UAAU;AAFE,GAAvB;AAKA,SAAO0B,KAAK,CAAE,UAASC,EAAG,EAAd,EAAiBJ,cAAjB,CAAL,CAAsCP,IAAtC,CAA2Cf,cAA3C,CAAP;AACD;;AAED,SAASI,QAAT,CAAkBM,QAAlB,EAA4BC,QAA5B,EAAsC;AACpC,SAAOb,KAAK,CACTgB,IADI,CACE,iBADF,EACoB;AAAEJ,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GADpB,EAEJI,IAFI,CAECf,cAFD,CAAP,CADoC,CAIpC;AACD;;AAED,SAASO,MAAT,CAAgBU,IAAhB,EAAsB;AACpB,QAAMK,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAE,EAAE,GAAGzB,UAAU,EAAf;AAAmB,sBAAgB;AAAnC,KAFY;AAGrB4B,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf;AAHe,GAAvB;AAMA,SAAOQ,KAAK,CAAE,UAASR,IAAI,CAACS,EAAG,EAAnB,EAAsBJ,cAAtB,CAAL,CAA2CP,IAA3C,CAAgDf,cAAhD,CAAP;AACD,C,CAED;;;AACA,SAASS,OAAT,CAAiBiB,EAAjB,EAAqB;AACnB,QAAMJ,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,QADa;AAErBC,IAAAA,OAAO,EAAEzB,UAAU;AAFE,GAAvB;AAKA,SAAO0B,KAAK,CAAE,UAASC,EAAG,EAAd,EAAiBJ,cAAjB,CAAL,CAAsCP,IAAtC,CAA2Cf,cAA3C,CAAP;AACD","sourcesContent":["// import config from \"config\";\nimport axios from \"axios\";\nimport { authHeader, handleResponse } from \"./ServiceHelpers\";\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete,\n};\n\nfunction login(username, password) {\n  console.log(\"login\");\n  return axios\n    .post(\"/users/authenticate\", { username, password })\n    .then(handleResponse)\n    .then((data) => {\n      const user = data.username;\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem(\"user\", user);\n      localStorage.setItem(\"token\", data.token);\n      console.log(user);\n      return user;\n    });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"token\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(username, password) {\n  return axios\n    .post(`/users/register`, { username, password })\n    .then(handleResponse);\n  // .then(login({ username, password }))\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n"]},"metadata":{},"sourceType":"module"}