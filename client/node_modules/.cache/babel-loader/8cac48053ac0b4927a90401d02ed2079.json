{"ast":null,"code":"import { userService } from \"../services/UserService\";\nimport { getPages } from \"./Page\"; //Actions\n\nconst LOGIN_REQUEST = \"components/Home/LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"components/Home/LOGIN_SUCCESS\";\nconst LOGIN_FAILURE = \"components/Home/LOGIN_FAILURE\";\nconst LOGOUT = \"components/Home/LOGOUT\"; //Reducer\n\nlet user = localStorage.getItem(\"user\");\nconst initialState = user ? {\n  loggedIn: true,\n  user\n} : {};\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return Object.assign({}, state, {\n        loggingIn: true\n      });\n\n    case LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        loggedIn: true,\n        user: action.user // pages: action.pages,\n\n      });\n\n    case LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        error: true\n      });\n\n    case LOGOUT:\n      return Object.assign({}, state, {\n        logout: true\n      });\n\n    default:\n      return state;\n  }\n} //Action Creators\n\nexport function login(username, password, history) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    userService.login(username, password).then(user => {\n      console.log(user); // dispatch(success(user));\n\n      dispatch(getPages()); // history.push(\"/\");\n    }, error => {\n      console.log(\"error\");\n      dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: LOGIN_FAILURE,\n      error\n    };\n  }\n}\nexport function logout(history) {\n  return dispatch => {\n    dispatch({\n      type: LOGOUT\n    });\n    userService.logout();\n    history.push(`/`);\n  };\n}","map":{"version":3,"sources":["/Users/Eunice/Documents/my-app/client/src/redux/Login.js"],"names":["userService","getPages","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","user","localStorage","getItem","initialState","loggedIn","loginReducer","state","action","type","Object","assign","loggingIn","error","logout","login","username","password","history","dispatch","request","then","console","log","failure","toString","success","push"],"mappings":"AAAA,SAASA,WAAT,QAA4B,yBAA5B;AACA,SAASC,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,+BAAtB;AACA,MAAMC,aAAa,GAAG,+BAAtB;AACA,MAAMC,aAAa,GAAG,+BAAtB;AACA,MAAMC,MAAM,GAAG,wBAAf,C,CAEA;;AACA,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX;AACA,MAAMC,YAAY,GAAGH,IAAI,GAAG;AAAEI,EAAAA,QAAQ,EAAE,IAAZ;AAAkBJ,EAAAA;AAAlB,CAAH,GAA8B,EAAvD;AAEA,eAAe,SAASK,YAAT,CAAsBC,KAAK,GAAGH,YAA9B,EAA4CI,MAA5C,EAAoD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,aAAL;AACE,aAAOa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BK,QAAAA,SAAS,EAAE;AADmB,OAAzB,CAAP;;AAGF,SAAKd,aAAL;AACE,aAAOY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BF,QAAAA,QAAQ,EAAE,IADoB;AAE9BJ,QAAAA,IAAI,EAAEO,MAAM,CAACP,IAFiB,CAG9B;;AAH8B,OAAzB,CAAP;;AAKF,SAAKF,aAAL;AACE,aAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BM,QAAAA,KAAK,EAAE;AADuB,OAAzB,CAAP;;AAGF,SAAKb,MAAL;AACE,aAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BO,QAAAA,MAAM,EAAE;AADsB,OAAzB,CAAP;;AAGF;AACE,aAAOP,KAAP;AApBJ;AAsBD,C,CAED;;AACA,OAAO,SAASQ,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4C;AACjD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,OAAO,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAAR,CAAR;AACArB,IAAAA,WAAW,CAACoB,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCI,IAAtC,CACGpB,IAAD,IAAU;AACRqB,MAAAA,OAAO,CAACC,GAAR,CAAYtB,IAAZ,EADQ,CAER;;AACAkB,MAAAA,QAAQ,CAACvB,QAAQ,EAAT,CAAR,CAHQ,CAIR;AACD,KANH,EAOGiB,KAAD,IAAW;AACTS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAJ,MAAAA,QAAQ,CAACK,OAAO,CAACX,KAAK,CAACY,QAAN,EAAD,CAAR,CAAR,CAFS,CAGT;AACD,KAXH;AAaD,GAfD;;AAiBA,WAASL,OAAT,CAAiBnB,IAAjB,EAAuB;AACrB,WAAO;AAAEQ,MAAAA,IAAI,EAAEZ,aAAR;AAAuBI,MAAAA;AAAvB,KAAP;AACD;;AACD,WAASyB,OAAT,CAAiBzB,IAAjB,EAAuB;AACrB,WAAO;AAAEQ,MAAAA,IAAI,EAAEX,aAAR;AAAuBG,MAAAA;AAAvB,KAAP;AACD;;AACD,WAASuB,OAAT,CAAiBX,KAAjB,EAAwB;AACtB,WAAO;AAAEJ,MAAAA,IAAI,EAAEV,aAAR;AAAuBc,MAAAA;AAAvB,KAAP;AACD;AACF;AAED,OAAO,SAASC,MAAT,CAAgBI,OAAhB,EAAyB;AAC9B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEV,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACAL,IAAAA,WAAW,CAACmB,MAAZ;AACAI,IAAAA,OAAO,CAACS,IAAR,CAAc,GAAd;AACD,GAJD;AAKD","sourcesContent":["import { userService } from \"../services/UserService\";\nimport { getPages } from \"./Page\";\n\n//Actions\nconst LOGIN_REQUEST = \"components/Home/LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"components/Home/LOGIN_SUCCESS\";\nconst LOGIN_FAILURE = \"components/Home/LOGIN_FAILURE\";\nconst LOGOUT = \"components/Home/LOGOUT\";\n\n//Reducer\nlet user = localStorage.getItem(\"user\");\nconst initialState = user ? { loggedIn: true, user } : {};\n\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return Object.assign({}, state, {\n        loggingIn: true,\n      });\n    case LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        loggedIn: true,\n        user: action.user,\n        // pages: action.pages,\n      });\n    case LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        error: true,\n      });\n    case LOGOUT:\n      return Object.assign({}, state, {\n        logout: true,\n      });\n    default:\n      return state;\n  }\n}\n\n//Action Creators\nexport function login(username, password, history) {\n  return (dispatch) => {\n    dispatch(request({ username }));\n    userService.login(username, password).then(\n      (user) => {\n        console.log(user);\n        // dispatch(success(user));\n        dispatch(getPages());\n        // history.push(\"/\");\n      },\n      (error) => {\n        console.log(\"error\");\n        dispatch(failure(error.toString()));\n        // dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: LOGIN_REQUEST, user };\n  }\n  function success(user) {\n    return { type: LOGIN_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: LOGIN_FAILURE, error };\n  }\n}\n\nexport function logout(history) {\n  return (dispatch) => {\n    dispatch({ type: LOGOUT });\n    userService.logout();\n    history.push(`/`);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}